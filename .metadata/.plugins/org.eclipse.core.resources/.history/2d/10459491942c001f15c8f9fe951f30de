package com.mysite.sbb.email;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Component;

import com.mysite.sbb.user.SiteUser;
import com.mysite.sbb.user.UserService;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;

import java.security.SecureRandom;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

@Component
@RequiredArgsConstructor
public class EmailUtilImpl implements EmailUtil {
	private final UserService userService;
	private final RedisService redisService;

	@Autowired
	private JavaMailSender sender;

	public class RandomStringUtil {
		private static final String CHAR_UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		private static final String CHAR_LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
		private static final String CHAR_DIGITS = "0123456789";
		private static final String CHAR_SPECIAL = "!@#$%^&*";

		private static final String ALL_CHARS = CHAR_UPPERCASE + CHAR_LOWERCASE + CHAR_DIGITS + CHAR_SPECIAL;

		private static final int keyLength = 32; // 생성 길이

		public String generateRandomKey() {
			StringBuilder sb = new StringBuilder(keyLength);
			Random random = new SecureRandom();
			for (int i = 0; i < keyLength; i++) {
				int randomIndex = random.nextInt(ALL_CHARS.length());
				sb.append(ALL_CHARS.charAt(randomIndex));
			}

			return sb.toString();
		}

	@Override
	public Map<String, Object> sendEmail(String username, String subject, String body) {
		Map<String, Object> result = new HashMap<String, Object>();
		MimeMessage message = sender.createMimeMessage();
		MimeMessageHelper helper = new MimeMessageHelper(message);
		SiteUser user = userService.getUser(username);
		String toAddress = user.getEmail();
		String random = generateRandomKey();
		try {
			helper.setTo(toAddress);
			helper.setSubject(subject);
			helper.setText(body+random);
			result.put("resultCode", 200);
		} catch (MessagingException e) {
			e.printStackTrace();
			result.put("resultCode", 500);
		}

		sender.send(message);
		redisService.setRedis(username,);
		return result;
	}
}